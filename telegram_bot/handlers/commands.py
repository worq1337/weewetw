from telegram import Update
from telegram.ext import ContextTypes
from utils.api_client import APIClient
import io
import json

api_client = APIClient()

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    welcome_message = f"""
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TBCparcer!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏ —É—á–∏—Ç—ã–≤–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —á–µ–∫–∏ –∏–∑ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
/operators - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏
/db - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
/export - –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Excel

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç —á–µ–∫–∞, –∏ —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞—é.
"""
    await update.message.reply_text(welcome_message)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üìã –°–ü–†–ê–í–ö–ê –ü–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ TBCparcer

üîπ –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò:
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —á–µ–∫–æ–≤
‚Ä¢ –£—á–µ—Ç –∏ –∞–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏
‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Excel

üîπ –ö–ê–ö –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨:
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —á–µ–∫–∞ –≤ —á–∞—Ç
2. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ
3. –ü—Ä–æ–≤–µ—Ä–∏—Ç –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
4. –°–æ—Ö—Ä–∞–Ω–∏—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

üîπ –ö–û–ú–ê–ù–î–´:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/operators - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏
/db - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
/export - –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel

üîπ –§–û–†–ú–ê–¢–´ –ß–ï–ö–û–í:
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —á–µ–∫–∏ –æ—Ç –≤—Å–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö –±–∞–Ω–∫–æ–≤ –∏ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞:
‚Ä¢ HUMO, UZCARD, NBU
‚Ä¢ Milliy Bank, Hamkor Bank, SmartBank
‚Ä¢ PayMe, Click, Paynet –∏ –¥—Ä—É–≥–∏–µ

üîπ –†–ï–ó–ï–†–í–ù–û–ï –ö–û–ü–ò–†–û–í–ê–ù–ò–ï:
–ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 00:00 –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
"""
    await update.message.reply_text(help_text)

async def operators_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /operators"""
    user_id = update.effective_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = api_client.get_operators(user_id)
        
        if 'error' in result:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤: {result['error']}")
            return
        
        operators = result.get('operators', [])
        
        if not operators:
            await update.message.reply_text("–û–ø–µ—Ä–∞—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ
        global_ops = [op for op in operators if op['is_global']]
        personal_ops = [op for op in operators if not op['is_global']]
        
        message = "üìä –û–ü–ï–†–ê–¢–û–†–´ –ò –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø\n\n"
        
        if global_ops:
            message += "üåê –ì–õ–û–ë–ê–õ–¨–ù–´–ï –û–ü–ï–†–ê–¢–û–†–´:\n"
            for op in global_ops[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                message += f"‚Ä¢ {op['name']}"
                if op['description']:
                    message += f" ({op['description']})"
                message += "\n"
            
            if len(global_ops) > 10:
                message += f"... –∏ –µ—â–µ {len(global_ops) - 10} –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤\n"
        
        if personal_ops:
            message += "\nüë§ –ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ï –û–ü–ï–†–ê–¢–û–†–´:\n"
            for op in personal_ops:
                message += f"‚Ä¢ {op['name']}"
                if op['description']:
                    message += f" ({op['description']})"
                message += "\n"
        
        message += f"\n–í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤: {len(operators)}"
        message += "\n\n–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:"
        message += "\n/add_operator –ù–∞–∑–≤–∞–Ω–∏–µ - –û–ø–∏—Å–∞–Ω–∏–µ"
        
        await update.message.reply_text(message)
    
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã: {str(e)}")

async def db_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /db"""
    user_id = update.effective_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = api_client.get_transactions(user_id, per_page=1)
        
        if 'error' in result:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {result['error']}")
            return
        
        total_transactions = result.get('total', 0)
        
        message = f"""
üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {update.effective_user.first_name}
üìã –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {total_transactions}
üìÑ –°—Ç—Ä–∞–Ω–∏—Ü –¥–∞–Ω–Ω—ã—Ö: {result.get('pages', 0)}

üîÑ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: —Å–µ–π—á–∞—Å
üíæ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ: –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 00:00

–î–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /export
"""
        
        await update.message.reply_text(message)
    
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã: {str(e)}")

async def export_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /export"""
    user_id = update.effective_user.id
    
    try:
        await update.message.reply_text("üì§ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        result = api_client.export_transactions(user_id)
        
        if 'error' in result:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {result['error']}")
            return
        
        export_data = result.get('data', [])
        
        if not export_data:
            await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
            return
        
        # –°–æ–∑–¥–∞–µ–º JSON —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        json_data = json.dumps(export_data, ensure_ascii=False, indent=2)
        file_buffer = io.BytesIO(json_data.encode('utf-8'))
        file_buffer.name = f"transactions_{user_id}.json"
        
        await update.message.reply_document(
            document=file_buffer,
            filename=f"TBCparcer_export_{user_id}.json",
            caption=f"üìä –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n–í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(export_data)}\n\n–î–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏."
        )
    
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {str(e)}")

async def add_operator_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_operator"""
    user_id = update.effective_user.id
    
    if not context.args:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_operator –ù–∞–∑–≤–∞–Ω–∏–µ - –û–ø–∏—Å–∞–Ω–∏–µ\n"
            "–ü—Ä–∏–º–µ—Ä: /add_operator –ù–û–í–´–ô –ë–ê–ù–ö - –ú–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
        )
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        full_text = ' '.join(context.args)
        if ' - ' in full_text:
            name, description = full_text.split(' - ', 1)
        else:
            name = full_text
            description = None
        
        # –°–æ–∑–¥–∞–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        result = api_client.create_operator(user_id, name.strip(), description.strip() if description else None)
        
        if 'error' in result:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {result['error']}")
            return
        
        operator = result.get('operator', {})
        message = f"‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω:\n\n"
        message += f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {operator['name']}\n"
        if operator['description']:
            message += f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {operator['description']}\n"
        message += f"üÜî ID: {operator['id']}"
        
        await update.message.reply_text(message)
    
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {str(e)}")

