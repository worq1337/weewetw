from telegram import Update
from telegram.ext import ContextTypes
from utils.api_client import APIClient
from utils.receipt_parser import ReceiptParser

api_client = APIClient()
receipt_parser = ReceiptParser()

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—á–µ–∫–æ–≤)"""
    user = update.effective_user
    message_text = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞
    if message_text.startswith('/'):
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
    if len(message_text.strip()) < 10:
        await update.message.reply_text(
            "–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —á–µ–∫–∞."
        )
        return
    
    try:
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_message = await update.message.reply_text("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —á–µ–∫...")
        
        # –ü–∞—Ä—Å–∏–º —á–µ–∫ —Å –ø–æ–º–æ—â—å—é AI
        parsed_data = receipt_parser.parse_receipt(message_text, retry_count=1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞
        if 'error' in parsed_data:
            await processing_message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {parsed_data['error']}\n\n"
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —á–µ–∫."
            )
            return
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        validation_result = receipt_parser.validate_receipt_data(parsed_data)
        if 'error' in validation_result:
            await processing_message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {validation_result['error']}"
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        save_result = api_client.create_transaction(user.id, parsed_data)
        
        if 'error' in save_result:
            if 'Duplicate transaction' in save_result['error']:
                await processing_message.edit_text(
                    "‚ö†Ô∏è –î—É–±–ª–∏–∫–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏!\n\n"
                    "–≠—Ç–æ—Ç —á–µ–∫ —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ä–∞–Ω–µ–µ."
                )
            else:
                await processing_message.edit_text(
                    f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {save_result['error']}"
                )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
        transaction = save_result.get('transaction', {})
        
        success_message = "‚úÖ –ß–µ–∫ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n\n"
        success_message += f"üìÖ –î–∞—Ç–∞: {transaction.get('date_time', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        success_message += f"üí∞ –°—É–º–º–∞: {transaction.get('amount', 0)} {transaction.get('currency', 'UZS')}\n"
        success_message += f"üîÑ –û–ø–µ—Ä–∞—Ü–∏—è: {get_operation_emoji(transaction.get('operation_type'))} {get_operation_name(transaction.get('operation_type'))}\n"
        
        if transaction.get('card_number'):
            success_message += f"üí≥ –ö–∞—Ä—Ç–∞: {transaction['card_number']}\n"
        
        if transaction.get('description'):
            success_message += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {transaction['description']}\n"
        
        if transaction.get('operator_name'):
            success_message += f"üè¶ –û–ø–µ—Ä–∞—Ç–æ—Ä: {transaction['operator_name']}\n"
        
        if transaction.get('balance') is not None:
            success_message += f"üíµ –ë–∞–ª–∞–Ω—Å: {transaction['balance']} {transaction.get('currency', 'UZS')}\n"
        
        success_message += f"\nüÜî ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {transaction.get('id')}"
        
        await processing_message.edit_text(success_message)
    
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

def get_operation_emoji(operation_type: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    emoji_map = {
        'payment': 'üí∏',
        'refill': 'üí∞',
        'conversion': 'üîÑ',
        'cancel': '‚ùå'
    }
    return emoji_map.get(operation_type, 'üìã')

def get_operation_name(operation_type: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    name_map = {
        'payment': '–û–ø–ª–∞—Ç–∞/–°–ø–∏—Å–∞–Ω–∏–µ',
        'refill': '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ',
        'conversion': '–ö–æ–Ω–≤–µ—Ä—Å–∏—è',
        'cancel': '–û—Ç–º–µ–Ω–∞'
    }
    return name_map.get(operation_type, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è')

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    await update.message.reply_text(
        "üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —á–µ–∫–∞ –æ–±—ã—á–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º."
    )

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    await update.message.reply_text(
        "üì∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —á–µ–∫–∞ –æ–±—ã—á–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º."
    )

